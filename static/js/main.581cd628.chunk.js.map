{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","filter","setFilter","open","setOpen","options","setOptions","loading","length","useEffect","active","a","fetch","response","json","cities","list","forEach","Display","nearbyAirports","code","name","push","city","Autocomplete","id","style","width","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","toLocaleUpperCase","freeSolo","groupBy","renderInput","params","TextField","label","variant","onChange","e","target","InputProps","endAdornment","Fragment","CircularProgress","color","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAuIeA,MAnGf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAEWH,IAAMC,UAAS,GAF1B,mBAENG,EAFM,KAEAC,EAFA,OAGiBL,IAAMC,SAAqB,IAH5C,mBAGNK,EAHM,KAGGC,EAHH,KAIPC,EAAUJ,GAA2B,IAAnBE,EAAQG,OA6ChC,OA3CAT,IAAMU,WAAU,WACd,IAAIC,GAAS,EAEb,GAAKH,EA6BL,OAzBA,sBAAC,gCAAAI,EAAA,yDACgB,KAAXV,EADL,iEAGwBW,MAAM,6DAAD,OACmCX,EADnC,wBAH7B,cAGOY,EAHP,gBAMmCA,EAASC,OAN5C,OAMOC,EANP,OAQKL,IACIM,EAAmB,GAEzBD,EAAOE,SAAQ,YAAkC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eACX,OAAdA,QAAc,IAAdA,KAAgBF,SAAQ,gBAAGG,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACtBL,EAAKM,KAAK,CACRF,OACAC,OACAE,KAAML,OAIVZ,EAAW,GAAD,OAAKU,QApBpB,0CAAD,GAyBO,WACLN,GAAS,KAEV,CAACH,EAASN,IAEbF,IAAMU,WAAU,WACTN,GACHG,EAAW,MAEZ,CAACH,IAGF,kBAACqB,EAAA,EAAD,CACEC,GAAG,WACHC,MAAO,CAAEC,MAAO,KAChBxB,KAAMA,EACNyB,OAAQ,WACS,KAAX3B,GAAeG,GAAQ,IAE7ByB,QAAS,WACPzB,GAAQ,IAEV0B,kBAAmB,SAACC,EAAQC,GAAT,OAAmBD,EAAOV,OAASW,EAAMX,MAC5DY,eAAgB,SAAAF,GAAM,gBACjBA,EAAOX,KAAKc,oBADK,cACoBH,EAAOV,OAEjDc,UAAQ,EACR9B,QAASA,EACTE,QAASA,EACT6B,QAAS,SAAAL,GAAM,OAAIA,EAAOR,MAC1Bc,YAAa,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,UACNC,QAAQ,WACRC,SAAU,SAAAC,GACRzC,EAAUyC,EAAEC,OAAOZ,OAEI,KAAnBW,EAAEC,OAAOZ,MACX5B,GAAQ,GAERA,GAAQ,IAGZyC,WAAU,eACLP,EAAOO,WADF,CAERC,aACE,kBAAC,IAAMC,SAAP,KACGxC,EACC,kBAACyC,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACtC,KACHZ,EAAOO,WAAWC,uBCjHfK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.581cd628.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport \"./App.css\";\n\ninterface IAirport {\n  name: string;\n  code: string;\n  city: string;\n}\n\ninterface ICity {\n  name: string;\n  airports: IAirport[];\n}\n\ninterface IResponse {\n  AirRank: number;\n  CarRank: number;\n  Display: string;\n  HotelRank: number;\n  KeyType: string;\n  LocID: string;\n  Word: string;\n  isCode: boolean;\n  isFirst: boolean;\n  nearbyAirports: [\n    {\n      code: string;\n      name: string;\n      isRail: boolean;\n    }\n  ];\n}\n\nfunction App() {\n  const [filter, setFilter] = React.useState(\"\");\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState<IAirport[]>([]);\n  const loading = open && options.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      if (filter === \"\") return;\n\n      const response = await fetch(\n        `http://localhost:3001/cities?queryparams={\"searchString\":\"${filter}\",\"mode\":\"Flights\"}`\n      );\n      const cities: IResponse[] = await response.json();\n\n      if (active) {\n        const list: IAirport[] = [];\n\n        cities.forEach(({ Display, nearbyAirports }) => {\n          nearbyAirports?.forEach(({ code, name }) =>\n            list.push({\n              code,\n              name,\n              city: Display\n            })\n          );\n\n          setOptions([...list]);\n        });\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading, filter]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      id=\"airports\"\n      style={{ width: 300 }}\n      open={open}\n      onOpen={() => {\n        if (filter !== \"\") setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      getOptionSelected={(option, value) => option.name === value.name}\n      getOptionLabel={option =>\n        `${option.code.toLocaleUpperCase()} - ${option.name}`\n      }\n      freeSolo\n      options={options}\n      loading={loading}\n      groupBy={option => option.city}\n      renderInput={params => (\n        <TextField\n          {...params}\n          label=\"Airport\"\n          variant=\"outlined\"\n          onChange={e => {\n            setFilter(e.target.value);\n\n            if (e.target.value === \"\") {\n              setOpen(false);\n            } else {\n              setOpen(true);\n            }\n          }}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            )\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}