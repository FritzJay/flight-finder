{"version":3,"sources":["Components/Flights/AirportSearchInput.tsx","Components/Flights/FlightsTable.tsx","API/queryFlights.ts","Redux/flights.ts","Components/Flights/Flights.tsx","Redux/information.ts","Components/Information/Information.tsx","Redux/system.ts","App.tsx","serviceWorker.ts","Redux/index.ts","index.tsx"],"names":["AirportSearchInput","value","handleChange","label","React","useState","options","setOptions","loading","setLoading","queryForOptions","e","a","target","fetch","process","response","json","cities","list","forEach","Display","nearbyAirports","LocID","code","name","push","locID","city","Autocomplete","id","toLowerCase","replace","getOptionSelected","option","getOptionLabel","toLocaleUpperCase","freeSolo","clearOnEscape","onChange","event","newValue","groupBy","renderInput","params","TextField","required","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","descendingComparator","b","orderBy","headCells","numeric","columns","length","useStyles","makeStyles","theme","createStyles","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","selected","backgroundColor","palette","primary","light","contrastText","FlightsTable","data","classes","order","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","setSelected","TableContainer","Typography","style","Table","aria-label","TableHead","TableRow","map","TableCell","key","align","sortDirection","TableSortLabel","active","direction","onClick","property","className","TableBody","tabIndex","colSpan","textAlign","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","airline","grade","duration","stops","fare","cabin","hover","Math","floor","toLocaleString","currency","minimumFractionDigits","TableFooter","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","queryFlights","from","to","date","timeStart","timeEnd","formatFlightQueryParameters","console","log","flights","airlineName","flightGrade","numStops","fares","totalFare","seatsBySegment","itineraryFlights","reduce","acc","cur","substring","legs","formatFlightLegs","timeFilters","formatTimeFilters","toISOString","split","initialFlightsState","Date","now","timeRange","formatTime","time","Flights","setActive","setFlights","dispatch","useDispatch","useSelector","state","handleToChange","airport","type","payload","setTo","handleFromChange","setFrom","handleDateChange","setDate","handleTimeRangeChange","setTimeRange","useFlights","query","useCallback","Grid","container","spacing","justify","item","xs","sm","utils","DateFnsUtils","inputVariant","showTodayButton","alignItems","Slider","step","min","max","marks","valueLabelDisplay","aria-labelledby","getAriaValueText","Button","disabled","initialInformationState","fName","lName","so","Information","information","handleFirstNameChange","handleLastNameChange","handleSOChange","useInformationPage","gutterBottom","fullWidth","autoComplete","setStep","initialState","appBar","layout","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","stepper","buttons","display","justifyContent","button","steps","App","system","handleNext","handleBack","useApp","CssBaseline","AppBar","Toolbar","noWrap","Paper","component","Stepper","activeStep","Step","StepLabel","Error","getStepContent","Link","href","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8f5175c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { IAirport } from \"../../interfaces\";\r\n\r\ninterface IResponse {\r\n  AirRank: number;\r\n  CarRank: number;\r\n  Display: string;\r\n  HotelRank: number;\r\n  KeyType: string;\r\n  LocID: string;\r\n  Word: string;\r\n  isCode: boolean;\r\n  isFirst: boolean;\r\n  nearbyAirports: [\r\n    {\r\n      code: string;\r\n      name: string;\r\n      isRail: boolean;\r\n    }\r\n  ];\r\n}\r\n\r\ninterface ICity {\r\n  name: string;\r\n  airports: IAirport[];\r\n}\r\n\r\nconst AirportSearchInput = ({\r\n  value,\r\n  handleChange,\r\n  label\r\n}: {\r\n  value: IAirport | null;\r\n  handleChange: (value: IAirport | null) => void;\r\n  label: string;\r\n}) => {\r\n  const [options, setOptions] = React.useState<IAirport[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  const queryForOptions = async (e: any) => {\r\n    if (e.target.value === \"\") return;\r\n\r\n    setLoading(true);\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_API_URL}/airports?queryparams={\"searchString\":\"${e.target.value}\"}`\r\n    );\r\n    const cities: IResponse[] = await response.json();\r\n\r\n    const list: IAirport[] = [];\r\n\r\n    cities.forEach(({ Display, nearbyAirports, LocID }) => {\r\n      nearbyAirports?.forEach(({ code, name }) =>\r\n        list.push({\r\n          code,\r\n          name,\r\n          locID: LocID,\r\n          city: Display\r\n        })\r\n      );\r\n\r\n      setOptions([...list]);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      id={label.toLowerCase().replace(\" \", \"-\")}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={option =>\r\n        `${option.code.toLocaleUpperCase()} - ${option.name}`\r\n      }\r\n      freeSolo\r\n      clearOnEscape\r\n      value={value}\r\n      onChange={(event: any, newValue: IAirport | null) => {\r\n        handleChange(newValue);\r\n      }}\r\n      options={options}\r\n      loading={loading}\r\n      groupBy={option => option.city}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label={label}\r\n          required\r\n          variant=\"outlined\"\r\n          onChange={queryForOptions}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? (\r\n                  <CircularProgress color=\"inherit\" size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AirportSearchInput;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  TableContainer,\r\n  TablePagination,\r\n  Table,\r\n  TableBody,\r\n  TableFooter,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TableSortLabel,\r\n  Theme,\r\n  CircularProgress,\r\n  makeStyles,\r\n  createStyles\r\n} from \"@material-ui/core\";\r\nimport { IFlight } from \"../../interfaces\";\r\n\r\n/* Sorting */\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\ntype Order = \"asc\" | \"desc\";\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n  order: Order,\r\n  orderBy: Key\r\n): (\r\n  a: { [key in Key]: number | string },\r\n  b: { [key in Key]: number | string }\r\n) => number {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\n/* Table Header */\r\ninterface IHeadCell {\r\n  id: keyof IFlight;\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: IHeadCell[] = [\r\n  { id: \"airline\", numeric: false, label: \"Airline\" },\r\n  { id: \"cabin\", numeric: false, label: \"Cabin\" },\r\n  { id: \"grade\", numeric: false, label: \"Grade\" },\r\n  { id: \"duration\", numeric: false, label: \"Duration\" },\r\n  { id: \"stops\", numeric: true, label: \"Stops\" },\r\n  { id: \"fare\", numeric: true, label: \"Fare\" }\r\n];\r\n\r\nconst columns = headCells.length;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: \"rect(0 0 0 0)\",\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: \"hidden\",\r\n      padding: 0,\r\n      position: \"absolute\",\r\n      top: 20,\r\n      width: 1\r\n    },\r\n    selected: {\r\n      backgroundColor: theme.palette.primary.light,\r\n      color: theme.palette.primary.contrastText\r\n    }\r\n  })\r\n);\r\n\r\nconst FlightsTable = ({\r\n  data,\r\n  loading\r\n}: {\r\n  data: IFlight[];\r\n  loading: boolean;\r\n}) => {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = useState<Order>(\"asc\");\r\n  const [orderBy, setOrderBy] = useState<keyof IFlight>(\"fare\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [selected, setSelected] = useState<string | null>(null);\r\n\r\n  const handleRequestSort = (property: keyof IFlight) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) =>\r\n    setPage(newPage);\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <TableContainer>\r\n      <Typography variant=\"h6\" style={{ margin: \"2rem\" }}>\r\n        Available Flights\r\n      </Typography>\r\n\r\n      <Table size=\"small\" aria-label=\"available flights\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {headCells.map(({ id, label, numeric }) => (\r\n              <TableCell\r\n                key={id}\r\n                align={numeric ? \"right\" : \"left\"}\r\n                sortDirection={orderBy === id ? order : false}\r\n              >\r\n                <TableSortLabel\r\n                  active={orderBy === id}\r\n                  direction={orderBy === id ? order : \"asc\"}\r\n                  onClick={() => handleRequestSort(id)}\r\n                >\r\n                  {label}\r\n                  {orderBy === id ? (\r\n                    <span className={classes.visuallyHidden}>\r\n                      {order === \"desc\"\r\n                        ? \"sorted descending\"\r\n                        : \"sorted ascending\"}\r\n                    </span>\r\n                  ) : null}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          {data.length === 0 && !loading && (\r\n            <TableRow tabIndex={-1}>\r\n              <TableCell colSpan={columns}>\r\n                There are no flights available at this time.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n\r\n          {loading ? (\r\n            <TableRow>\r\n              <TableCell colSpan={columns} style={{ textAlign: \"center\" }}>\r\n                <CircularProgress size={36} />\r\n              </TableCell>\r\n            </TableRow>\r\n          ) : (\r\n            stableSort(data, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map(\r\n                ({\r\n                  id,\r\n                  airline,\r\n                  grade,\r\n                  duration,\r\n                  stops,\r\n                  fare,\r\n                  cabin\r\n                }: IFlight) => (\r\n                  <TableRow\r\n                    hover={selected !== id}\r\n                    className={selected === id ? classes.selected : \"\"}\r\n                    onClick={() =>\r\n                      selected === id ? setSelected(null) : setSelected(id)\r\n                    }\r\n                    tabIndex={-1}\r\n                    key={id}\r\n                  >\r\n                    <TableCell>{airline}</TableCell>\r\n                    <TableCell align=\"left\">{cabin}</TableCell>\r\n                    <TableCell align=\"left\">{grade}</TableCell>\r\n                    <TableCell align=\"left\">{`${Math.floor(\r\n                      duration / 60\r\n                    )}h ${duration % 60}m`}</TableCell>\r\n                    <TableCell align=\"right\">{stops}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {fare.toLocaleString(\"en-US\", {\r\n                        style: \"currency\",\r\n                        currency: \"USD\",\r\n                        minimumFractionDigits: 2\r\n                      })}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )\r\n              )\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              colSpan={columns}\r\n              count={data.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default FlightsTable;\r\n","import { IAirport, IFlight } from \"../interfaces\";\r\n\r\ninterface ILocation {\r\n  city?: any;\r\n  country?: any;\r\n  lat: number;\r\n  lon: number;\r\n  postalCode?: any;\r\n  region?: any;\r\n  street?: any;\r\n  code?: any;\r\n  isValid: boolean;\r\n  name?: any;\r\n  rgn?: any;\r\n  locId: string;\r\n  shortDisplay: string;\r\n  cityCode: string;\r\n}\r\n\r\ninterface IAirline {\r\n  code: string;\r\n  name: string;\r\n  fare: number;\r\n  isPreferred: boolean;\r\n  hasNonStop: boolean;\r\n}\r\n\r\ninterface IColumnBrand {\r\n  airlineCode: string;\r\n  brandId: number;\r\n  brandNum: number;\r\n  brandName: string;\r\n  extraColumns: number;\r\n  description: string;\r\n  fullDescription: string;\r\n  hasImage: boolean;\r\n  firstCheckedBag: string;\r\n  secondCheckedBag: string;\r\n  carryOnBag: string;\r\n  personalItem: string;\r\n  brandPerks: string[];\r\n  brandRestrictions: string[];\r\n  upgradeOffer: boolean;\r\n  upgradeOfferHeader: string;\r\n  upgradeOfferRestrictions: string[];\r\n  upgradeOfferBenefits: string[];\r\n}\r\n\r\ninterface IFlightBrand {\r\n  airlineCode: string;\r\n  brandId: number;\r\n  brandNum: number;\r\n  brandName: string;\r\n  extraColumns: number;\r\n  description: string;\r\n  fullDescription: string;\r\n  hasImage: boolean;\r\n  firstCheckedBag: string;\r\n  secondCheckedBag: string;\r\n  carryOnBag: string;\r\n  personalItem: string;\r\n  brandPerks: string[];\r\n  brandRestrictions: string[];\r\n  upgradeOffer: boolean;\r\n  upgradeOfferHeader: string;\r\n  upgradeOfferRestrictions: string[];\r\n  upgradeOfferBenefits: string[];\r\n}\r\n\r\ninterface ISeat {\r\n  route: string;\r\n  cabin: string;\r\n  cabinCode: string;\r\n  config: string;\r\n  num: number;\r\n  type: string;\r\n  pitchRate: string;\r\n  seatWidth: string;\r\n  width: number;\r\n  widthRate: string;\r\n  pitch: number;\r\n  seatPitch: string;\r\n}\r\n\r\ninterface IAvailability {\r\n  bic: string;\r\n  count: number;\r\n  cabin: string;\r\n}\r\n\r\ninterface IImage {\r\n  url: string;\r\n  cabin: string;\r\n  route: string;\r\n}\r\n\r\ninterface ISegment {\r\n  segNum: number;\r\n  fullSegNum: number;\r\n  sectorNum: number;\r\n  airlineCode: string;\r\n  airlineName: string;\r\n  allianceCode: string;\r\n  flightNumber: number;\r\n  fromCode: string;\r\n  fromName: string;\r\n  fromLocId?: any;\r\n  toCode: string;\r\n  toName: string;\r\n  toLocId?: any;\r\n  departs: string;\r\n  arrives: string;\r\n  dayChange: number;\r\n  opAirlineCode: string;\r\n  opAirlineName: string;\r\n  miles: number;\r\n  duration: number;\r\n  aircraftTypeCode: string;\r\n  aircraftTypeName: string;\r\n  aircraftTypeCategory: string;\r\n  fromTerminal: string;\r\n  toTerminal: string;\r\n  onTimePercent: number;\r\n  numStops: number;\r\n  planeChange: boolean;\r\n  isConnection: boolean;\r\n  isDelphiConnection: boolean;\r\n  connectionType?: any;\r\n  stopPoints: any[];\r\n  seats: ISeat[];\r\n  availability: IAvailability[];\r\n  seatText: string;\r\n  cabinSeatString: string;\r\n  cabinText: string;\r\n  seatBookingLevel: string;\r\n  brandNum: number;\r\n  brandId: number;\r\n  images: IImage[];\r\n}\r\n\r\ninterface ISegment2 {\r\n  duration: number;\r\n  flight: string;\r\n  status: string;\r\n  text: string;\r\n}\r\n\r\ninterface IAmenity {\r\n  code: number;\r\n  segments: ISegment2[];\r\n}\r\n\r\ninterface ISeatsBySegment {\r\n  route: string;\r\n  cabin: string;\r\n  cabinCode: string;\r\n  config: string;\r\n  num: number;\r\n  type: string;\r\n  pitchRate: string;\r\n  seatWidth: string;\r\n  width: number;\r\n  widthRate: string;\r\n  pitch: number;\r\n  seatPitch: string;\r\n}\r\n\r\ninterface IMedium {\r\n  url: string;\r\n  cabin: string;\r\n  route: string;\r\n}\r\n\r\ninterface IFare {\r\n  baseFare: number;\r\n  tax: number;\r\n  totalFare: number;\r\n  totalItinerary: number;\r\n  downgradeRequired: boolean;\r\n  notOfferedReason?: any;\r\n  soldOut: boolean;\r\n  specialRatePopup?: any;\r\n  specialRateText?: any;\r\n  bic: string;\r\n  fbc: string;\r\n  brandColumn: number;\r\n  brandIndex: number;\r\n  shelf: number;\r\n  grade: string;\r\n  amenities: IAmenity[];\r\n  split: string;\r\n  source: string;\r\n  itineraryFlights: string[];\r\n  outOfPolicy: boolean;\r\n  policyBreakDetails?: any;\r\n  rateType?: any;\r\n  refundable: boolean;\r\n  changeFee: string;\r\n  wifi: number;\r\n  ife: number;\r\n  liveTV: number;\r\n  power: number;\r\n  seatAssignments: number;\r\n  seatType: number;\r\n  seatWidth: string;\r\n  seatPitch: string;\r\n  boardingPriority: string;\r\n  seatsBySegment: ISeatsBySegment[];\r\n  media: IMedium[];\r\n  cabinClassCode: string;\r\n}\r\n\r\ninterface IFlightResponse {\r\n  airportOnly: boolean;\r\n  airlineCode: string;\r\n  airlineName: string;\r\n  flightGrade: string;\r\n  duration: number;\r\n  numStops: number;\r\n  segments: ISegment[];\r\n  fares: IFare[];\r\n  isPreferred: boolean;\r\n}\r\n\r\ninterface IAirportOption {\r\n  locId: string;\r\n  locIdName: string;\r\n  airports: IAirport[];\r\n}\r\n\r\ninterface IResponse {\r\n  fareDisplayType: string;\r\n  brandDisplayType: string;\r\n  showShelves: boolean;\r\n  allFlightsFilteredOut: boolean;\r\n  searchId: number;\r\n  statsId: number;\r\n  locations: ILocation[];\r\n  airlines: IAirline[];\r\n  columnBrands: IColumnBrand[];\r\n  flightBrands: IFlightBrand[];\r\n  flights: IFlightResponse[];\r\n  itineraries?: any;\r\n  selectedFlights?: any;\r\n  stopOptions: string[];\r\n  airportOptions: IAirportOption[];\r\n  unwantedAirports?: any;\r\n  policyApplied: number;\r\n  haveCustomerEmail: boolean;\r\n}\r\n\r\n// TODO: Accept array of flights\r\nexport const queryFlights = async (\r\n  from: IAirport,\r\n  to: IAirport,\r\n  date: Date,\r\n  timeStart: number,\r\n  timeEnd: number\r\n): Promise<IFlight[]> => {\r\n  const response = await fetch(\r\n    process.env.REACT_APP_API_URL +\r\n      `/flights?queryparams=${formatFlightQueryParameters(\r\n        from,\r\n        to,\r\n        date,\r\n        timeStart,\r\n        timeEnd\r\n      )}`\r\n  );\r\n  const json: IResponse = await response.json();\r\n\r\n  console.log(json);\r\n\r\n  const list: IFlight[] = [];\r\n\r\n  json.flights.forEach(\r\n    ({ airlineName, flightGrade, duration, numStops, fares }) =>\r\n      fares.forEach(({ totalFare, seatsBySegment, itineraryFlights }: IFare) =>\r\n        list.push({\r\n          id: itineraryFlights[0],\r\n          airline: airlineName,\r\n          grade: flightGrade,\r\n          duration,\r\n          stops: numStops,\r\n          fare: totalFare,\r\n          cabin: seatsBySegment\r\n            .reduce((acc, cur) => `${acc}/${cur.cabin}`, \"\")\r\n            .substring(1)\r\n        })\r\n      )\r\n  );\r\n\r\n  return list;\r\n};\r\n\r\nexport const formatFlightQueryParameters = (\r\n  from: IAirport,\r\n  to: IAirport,\r\n  date: Date,\r\n  timeStart: number,\r\n  timeEnd: number\r\n) => {\r\n  const legs = formatFlightLegs(from, to, date);\r\n  const timeFilters = formatTimeFilters(timeStart, timeEnd);\r\n  return `{${legs},${timeFilters},\"airlineView\":\"DL\",\"legNum\":1}`;\r\n};\r\n\r\nexport const formatFlightLegs = (from: IAirport, to: IAirport, date: Date) =>\r\n  `\"legs\":[{\"date\":\"${date.toISOString().split(\"T\")[0]}\",` +\r\n  `\"fromLocId\":\"${from.locID}\",\"toLocId\":\"${to.locID}\"}]`;\r\n\r\nexport const formatTimeFilters = (timeStart: number, timeEnd: number) =>\r\n  `\"filters\":{\"timeFilters\":[{\"departFromTime\":\"${timeStart}00\",\"departToTime\":\"${timeEnd}00\"}]}`;\r\n\r\nexport default queryFlights;\r\n","import { IFlightsState, IAirport } from \"../interfaces\";\r\n\r\n/* Types */\r\n\r\nexport const SET_FROM = \"SET_FROM\";\r\nexport const SET_TO = \"SET_TO\";\r\nexport const SET_DATE = \"SET_DATE\";\r\nexport const SET_TIME_RANGE = \"SET_TIME_RANGE\";\r\n\r\ninterface SetFromAction {\r\n  type: typeof SET_FROM;\r\n  payload: IAirport;\r\n}\r\n\r\ninterface SetToAction {\r\n  type: typeof SET_TO;\r\n  payload: IAirport;\r\n}\r\n\r\ninterface SetDateAction {\r\n  type: typeof SET_DATE;\r\n  payload: Date;\r\n}\r\n\r\ninterface SetTimeRangeAction {\r\n  type: typeof SET_TIME_RANGE;\r\n  payload: number[];\r\n}\r\n\r\nexport type FlightsActionType =\r\n  | SetFromAction\r\n  | SetToAction\r\n  | SetDateAction\r\n  | SetTimeRangeAction;\r\n\r\n/* Actions */\r\n\r\nexport const setFrom = (airport: IAirport | null) => ({\r\n  type: SET_FROM,\r\n  payload: airport\r\n});\r\n\r\nexport const setTo = (airport: IAirport | null) => ({\r\n  type: SET_TO,\r\n  payload: airport\r\n});\r\n\r\nexport const setDate = (date: Date | null) => ({\r\n  type: SET_DATE,\r\n  payload: date\r\n});\r\n\r\nexport const setTimeRange = (timeRange: number[]) => ({\r\n  type: SET_TIME_RANGE,\r\n  payload: timeRange\r\n});\r\n\r\n/* Reducer */\r\n\r\nexport const initialFlightsState: IFlightsState = {\r\n  from: null,\r\n  to: null,\r\n  date: new Date(Date.now()),\r\n  timeRange: [0, 23]\r\n};\r\n\r\nexport const flightsReducer = (\r\n  state = initialFlightsState,\r\n  action: FlightsActionType\r\n) => {\r\n  switch (action.type) {\r\n    case SET_FROM:\r\n      return {\r\n        ...state,\r\n        from: action.payload\r\n      };\r\n    case SET_TO:\r\n      return {\r\n        ...state,\r\n        to: action.payload\r\n      };\r\n    case SET_DATE:\r\n      return {\r\n        ...state,\r\n        date: action.payload\r\n      };\r\n    case SET_TIME_RANGE:\r\n      return {\r\n        ...state,\r\n        timeRange: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Grid, Button, Slider, Typography } from \"@material-ui/core\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { IAirport, IFlight } from \"../../interfaces\";\r\nimport AirportSearchInput from \"./AirportSearchInput\";\r\nimport FlightsTable from \"./FlightsTable\";\r\nimport queryFlights from \"../../API/queryFlights\";\r\nimport { RootState } from \"../../Redux\";\r\nimport { setTo, setFrom, setDate, setTimeRange } from \"../../Redux/flights\";\r\n\r\nconst formatTime = (time: number) => {\r\n  if (time === 0) return \"12am\";\r\n  else if (time > 12) return `${time % 12}pm`;\r\n  else return `${time}am`;\r\n};\r\n\r\nconst useFlights = () => {\r\n  const dispatch = useDispatch();\r\n  return useSelector((state: RootState) => ({\r\n    from: state.flights.from,\r\n    to: state.flights.to,\r\n    date: state.flights.date,\r\n    timeRange: state.flights.timeRange,\r\n    handleToChange: (airport: IAirport | null) => dispatch(setTo(airport)),\r\n    handleFromChange: (airport: IAirport | null) => dispatch(setFrom(airport)),\r\n    handleDateChange: (date: Date | null) => dispatch(setDate(date)),\r\n    handleTimeRangeChange: (timeRange: number[]) =>\r\n      dispatch(setTimeRange(timeRange))\r\n  }));\r\n};\r\n\r\nconst Flights = () => {\r\n  const [active, setActive] = React.useState(false);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [flights, setFlights] = React.useState<IFlight[]>([]);\r\n  const {\r\n    from,\r\n    to,\r\n    date,\r\n    timeRange,\r\n    handleToChange,\r\n    handleFromChange,\r\n    handleDateChange,\r\n    handleTimeRangeChange\r\n  } = useFlights();\r\n\r\n  const query = React.useCallback(async () => {\r\n    if (from === null || to === null || date === null) return;\r\n\r\n    setLoading(true);\r\n    setFlights(await queryFlights(from, to, date, timeRange[0], timeRange[1]));\r\n    setLoading(false);\r\n  }, [from, to, date, timeRange]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3} justify=\"space-evenly\">\r\n        <Grid item xs={12} sm={6}>\r\n          <AirportSearchInput\r\n            value={from}\r\n            handleChange={handleFromChange}\r\n            label=\"Flying from\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <AirportSearchInput\r\n            value={to}\r\n            handleChange={handleToChange}\r\n            label=\"Destination\"\r\n          />\r\n        </Grid>\r\n\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <Grid item xs={12}>\r\n            <KeyboardDatePicker\r\n              required\r\n              label=\"Departing Date\"\r\n              inputVariant=\"outlined\"\r\n              value={date}\r\n              onChange={handleDateChange}\r\n              showTodayButton\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={8} container justify=\"center\" alignItems=\"center\">\r\n            <Typography variant=\"subtitle2\" align=\"center\">\r\n              {formatTime(timeRange[0])} - {formatTime(timeRange[1])}\r\n            </Typography>\r\n\r\n            <Slider\r\n              value={timeRange}\r\n              onChange={(event: any, newValue: number | number[]) =>\r\n                handleTimeRangeChange(newValue as number[])\r\n              }\r\n              step={1}\r\n              min={0}\r\n              max={23}\r\n              marks={[\r\n                { value: 0, label: \"12am\" },\r\n                { value: 23, label: \"11pm\" }\r\n              ]}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"range-slider\"\r\n              getAriaValueText={formatTime}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              disabled={loading}\r\n              onClick={() => {\r\n                setActive(true);\r\n                query();\r\n              }}\r\n            >\r\n              Search\r\n            </Button>\r\n          </Grid>\r\n        </MuiPickersUtilsProvider>\r\n\r\n        <Grid item xs={12}>\r\n          {active && <FlightsTable data={flights} loading={loading} />}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Flights;\r\n","import { IInformationState } from \"../interfaces\";\r\n\r\n/* Types */\r\n\r\nexport const SET_FIRST_NAME = \"SET_FIRST_NAME\";\r\nexport const SET_LAST_NAME = \"SET_LAST_NAME\";\r\nexport const SET_SO = \"SET_SO\";\r\n\r\ninterface SetFirstNameAction {\r\n  type: typeof SET_FIRST_NAME;\r\n  payload: string;\r\n}\r\n\r\ninterface SetLastNameAction {\r\n  type: typeof SET_LAST_NAME;\r\n  payload: string;\r\n}\r\n\r\ninterface SetSOAction {\r\n  type: typeof SET_SO;\r\n  payload: string;\r\n}\r\n\r\nexport type InformationActionType =\r\n  | SetFirstNameAction\r\n  | SetLastNameAction\r\n  | SetSOAction;\r\n\r\n/* Actions */\r\n\r\nexport const setFirstName = (fName: string) => ({\r\n  type: SET_FIRST_NAME,\r\n  payload: fName\r\n});\r\n\r\nexport const setLastName = (lName: string) => ({\r\n  type: SET_LAST_NAME,\r\n  payload: lName\r\n});\r\n\r\nexport const setSO = (so: string) => ({\r\n  type: SET_SO,\r\n  payload: so\r\n});\r\n\r\n/* Reducer */\r\n\r\nexport const initialInformationState: IInformationState = {\r\n  fName: null,\r\n  lName: null,\r\n  so: null\r\n};\r\n\r\nexport const informationReducer = (\r\n  state = initialInformationState,\r\n  action: InformationActionType\r\n) => {\r\n  switch (action.type) {\r\n    case SET_FIRST_NAME:\r\n      return {\r\n        ...state,\r\n        fName: action.payload\r\n      };\r\n    case SET_LAST_NAME:\r\n      return {\r\n        ...state,\r\n        lName: action.payload\r\n      };\r\n    case SET_SO:\r\n      return {\r\n        ...state,\r\n        so: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { RootState } from \"../../Redux\";\r\nimport { setFirstName, setLastName, setSO } from \"../../Redux/information\";\r\n\r\nconst useInformationPage = () => {\r\n  const dispatch = useDispatch();\r\n  return useSelector((state: RootState) => ({\r\n    fName: state.information.fName,\r\n    lName: state.information.lName,\r\n    so: state.information.so,\r\n    handleFirstNameChange: (event: any) =>\r\n      dispatch(\r\n        setFirstName(event.target.value === \"\" ? null : event.target.value)\r\n      ),\r\n    handleLastNameChange: (event: any) =>\r\n      dispatch(\r\n        setLastName(event.target.value === \"\" ? null : event.target.value)\r\n      ),\r\n    handleSOChange: (event: any) =>\r\n      dispatch(setSO(event.target.value === \"\" ? null : event.target.value))\r\n  }));\r\n};\r\n\r\nconst Information = () => {\r\n  const {\r\n    fName,\r\n    lName,\r\n    so,\r\n    handleFirstNameChange,\r\n    handleLastNameChange,\r\n    handleSOChange\r\n  } = useInformationPage();\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Your Information\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n            fullWidth\r\n            autoComplete=\"fname\"\r\n            value={fName || \"\"}\r\n            onChange={handleFirstNameChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            label=\"Last name\"\r\n            fullWidth\r\n            autoComplete=\"lname\"\r\n            value={lName || \"\"}\r\n            onChange={handleLastNameChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            required\r\n            id=\"so\"\r\n            name=\"so\"\r\n            label=\"SO\"\r\n            fullWidth\r\n            autoComplete=\"so\"\r\n            value={so || \"\"}\r\n            onChange={handleSOChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import { ISystemState } from \"../interfaces\";\r\n\r\n/* Types */\r\n\r\nexport const SET_STEP = \"SET_STEP\";\r\n\r\ninterface SetStepAction {\r\n  type: typeof SET_STEP;\r\n  payload: number;\r\n}\r\n\r\nexport type SystemActionTypes = SetStepAction;\r\n\r\n/* Actions */\r\n\r\nexport const setStep = (step: number) => ({\r\n  type: SET_STEP,\r\n  payload: step\r\n});\r\n\r\n/* Reducer */\r\n\r\nconst initialState: ISystemState = {\r\n  step: 0\r\n};\r\n\r\nexport const systemReducer = (\r\n  state = initialState,\r\n  action: SystemActionTypes\r\n) => {\r\n  switch (action.type) {\r\n    case SET_STEP:\r\n      return {\r\n        ...state,\r\n        step: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"@material-ui/core\";\nimport { RootState } from \"./Redux/index\";\nimport Flights from \"./Components/Flights/Flights\";\nimport Information from \"./Components/Information/Information\";\nimport { setStep } from \"./Redux/system\";\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: \"relative\"\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 800,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5)\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst useApp = () => {\n  const dispatch = useDispatch();\n  return useSelector((state: RootState) => ({\n    step: state.system.step,\n    handleNext: () => dispatch(setStep(state.system.step + 1)),\n    handleBack: () => dispatch(setStep(state.system.step - 1))\n  }));\n};\n\nconst steps = [\"Information\", \"Flights\", \"Lodging\", \"Car Rentals\"];\n\nconst getStepContent = (step: number) => {\n  switch (step) {\n    case 0:\n      return <Information />;\n    case 1:\n      return <Flights />;\n    case 2:\n      return <div>Lodging</div>;\n    case 3:\n      return <div>Car Rentals</div>;\n    default:\n      throw new Error(\"Unknown step\");\n  }\n};\n\nconst App = () => {\n  const classes = useStyles();\n  const { step, handleBack, handleNext } = useApp();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Flight Finder\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Book Flights\n          </Typography>\n          <Stepper activeStep={step} className={classes.stepper}>\n            {steps.map(label => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {step === steps.length ? (\n              <React.Fragment>\n                <Typography variant=\"h5\" gutterBottom>\n                  Thank you for your order.\n                </Typography>\n                <Typography variant=\"subtitle1\">\n                  Your order number is #2001539. We have emailed your order\n                  confirmation, and will send you an update when your order has\n                  shipped.\n                </Typography>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {getStepContent(step)}\n                <div className={classes.buttons}>\n                  {step !== 0 && (\n                    <Button onClick={handleBack} className={classes.button}>\n                      Back\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                    className={classes.button}\n                  >\n                    {step === steps.length - 1 ? \"Place order\" : \"Next\"}\n                  </Button>\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          {\"Powered By \"}\n          <Link color=\"inherit\" href=\"https://www.certify.com/\">\n            Certify Travel\n          </Link>\n        </Typography>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { systemReducer } from \"./system\";\r\nimport { flightsReducer } from \"./flights\";\r\nimport { informationReducer } from \"./information\";\r\n\r\nconst rootReducer = combineReducers({\r\n  system: systemReducer,\r\n  flights: flightsReducer,\r\n  information: informationReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./Redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}