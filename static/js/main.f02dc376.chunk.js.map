{"version":3,"sources":["Components/Flights/AirportSearchInput.tsx","Components/Flights/FlightsTable.tsx","API/queryFlights.ts","Components/Flights/Flights.tsx","Components/Information/Information.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AirportSearchInput","setSelected","label","React","useState","options","setOptions","loading","setLoading","queryForOptions","e","a","target","value","fetch","process","response","json","cities","list","forEach","Display","nearbyAirports","LocID","code","name","push","locID","city","Autocomplete","id","getOptionSelected","option","getOptionLabel","toLocaleUpperCase","freeSolo","clearOnEscape","onChange","event","newValue","undefined","groupBy","renderInput","params","TextField","required","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","descendingComparator","b","orderBy","headCells","numeric","columns","length","useStyles","makeStyles","theme","createStyles","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","FlightsTable","data","classes","order","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","component","Paper","Typography","style","Table","aria-label","TableHead","TableRow","map","TableCell","key","align","sortDirection","TableSortLabel","active","direction","onClick","property","className","TableBody","tabIndex","colSpan","textAlign","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","airline","grade","duration","stops","fare","cabin","hover","Math","floor","toLocaleString","currency","minimumFractionDigits","TableFooter","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","queryFlights","from","to","date","timeStart","timeEnd","formatFlightQueryParameters","console","log","flights","airlineName","flightGrade","numStops","fares","totalFare","cabinClassCode","legs","formatFlightLegs","timeFilters","formatTimeFilters","toISOString","split","getHours","Flights","setFrom","setTo","Date","now","setDate","setTimeStart","setTimeEnd","setFlights","setActive","query","useCallback","Grid","container","spacing","justify","item","xs","sm","utils","DateFnsUtils","inputVariant","showTodayButton","KeyboardButtonProps","Button","disabled","Information","gutterBottom","fullWidth","autoComplete","PoweredBy","Link","href","appBar","layout","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","stepper","buttons","display","justifyContent","button","steps","App","activeStep","setActiveStep","CssBaseline","AppBar","Toolbar","noWrap","Stepper","Step","StepLabel","step","Error","getStepContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f02dc376.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { IAirport } from \"../../interfaces\";\r\n\r\ninterface IResponse {\r\n  AirRank: number;\r\n  CarRank: number;\r\n  Display: string;\r\n  HotelRank: number;\r\n  KeyType: string;\r\n  LocID: string;\r\n  Word: string;\r\n  isCode: boolean;\r\n  isFirst: boolean;\r\n  nearbyAirports: [\r\n    {\r\n      code: string;\r\n      name: string;\r\n      isRail: boolean;\r\n    }\r\n  ];\r\n}\r\n\r\ninterface ICity {\r\n  name: string;\r\n  airports: IAirport[];\r\n}\r\n\r\nconst AirportSearchInput = ({\r\n  setSelected,\r\n  label\r\n}: {\r\n  setSelected: (value: IAirport | undefined) => void;\r\n  label: string;\r\n}) => {\r\n  const [options, setOptions] = React.useState<IAirport[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  const queryForOptions = async (e: any) => {\r\n    if (e.target.value === \"\") return;\r\n\r\n    setLoading(true);\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_API_URL}/airports?queryparams={\"searchString\":\"${e.target.value}\"}`\r\n    );\r\n    const cities: IResponse[] = await response.json();\r\n\r\n    const list: IAirport[] = [];\r\n\r\n    cities.forEach(({ Display, nearbyAirports, LocID }) => {\r\n      nearbyAirports?.forEach(({ code, name }) =>\r\n        list.push({\r\n          code,\r\n          name,\r\n          locID: LocID,\r\n          city: Display\r\n        })\r\n      );\r\n\r\n      setOptions([...list]);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"airports\"\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={option =>\r\n        `${option.code.toLocaleUpperCase()} - ${option.name}`\r\n      }\r\n      freeSolo\r\n      clearOnEscape\r\n      onChange={(event: any, newValue: IAirport | null) => {\r\n        setSelected(newValue === null ? undefined : newValue);\r\n      }}\r\n      options={options}\r\n      loading={loading}\r\n      groupBy={option => option.city}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label={label}\r\n          required\r\n          variant=\"outlined\"\r\n          onChange={queryForOptions}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? (\r\n                  <CircularProgress color=\"inherit\" size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AirportSearchInput;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  TableContainer,\r\n  TablePagination,\r\n  Table,\r\n  TableBody,\r\n  TableFooter,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TableSortLabel,\r\n  Theme,\r\n  CircularProgress,\r\n  makeStyles,\r\n  createStyles\r\n} from \"@material-ui/core\";\r\nimport { IFlight } from \"../../interfaces\";\r\n\r\n/* Sorting */\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\ntype Order = \"asc\" | \"desc\";\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n  order: Order,\r\n  orderBy: Key\r\n): (\r\n  a: { [key in Key]: number | string },\r\n  b: { [key in Key]: number | string }\r\n) => number {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\n/* Table Header */\r\ninterface IHeadCell {\r\n  id: keyof IFlight;\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: IHeadCell[] = [\r\n  { id: \"airline\", numeric: false, label: \"Airline\" },\r\n  { id: \"cabin\", numeric: false, label: \"Cabin\" },\r\n  { id: \"grade\", numeric: false, label: \"Grade\" },\r\n  { id: \"duration\", numeric: false, label: \"Duration\" },\r\n  { id: \"stops\", numeric: true, label: \"Stops\" },\r\n  { id: \"fare\", numeric: true, label: \"Fare\" }\r\n];\r\n\r\nconst columns = headCells.length;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: \"rect(0 0 0 0)\",\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: \"hidden\",\r\n      padding: 0,\r\n      position: \"absolute\",\r\n      top: 20,\r\n      width: 1\r\n    }\r\n  })\r\n);\r\n\r\nconst FlightsTable = ({\r\n  data,\r\n  loading\r\n}: {\r\n  data: IFlight[];\r\n  loading: boolean;\r\n}) => {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = useState<Order>(\"asc\");\r\n  const [orderBy, setOrderBy] = useState<keyof IFlight>(\"fare\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleRequestSort = (property: keyof IFlight) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) =>\r\n    setPage(newPage);\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Typography variant=\"h6\" style={{ margin: \"2rem\" }}>\r\n        Available Flights\r\n      </Typography>\r\n\r\n      <Table size=\"small\" aria-label=\"available flights\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {headCells.map(({ id, label, numeric }) => (\r\n              <TableCell\r\n                key={id}\r\n                align={numeric ? \"right\" : \"left\"}\r\n                sortDirection={orderBy === id ? order : false}\r\n              >\r\n                <TableSortLabel\r\n                  active={orderBy === id}\r\n                  direction={orderBy === id ? order : \"asc\"}\r\n                  onClick={() => handleRequestSort(id)}\r\n                >\r\n                  {label}\r\n                  {orderBy === id ? (\r\n                    <span className={classes.visuallyHidden}>\r\n                      {order === \"desc\"\r\n                        ? \"sorted descending\"\r\n                        : \"sorted ascending\"}\r\n                    </span>\r\n                  ) : null}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          {data.length === 0 && !loading && (\r\n            <TableRow tabIndex={-1}>\r\n              <TableCell colSpan={columns}>\r\n                There are no flights available at this time.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n\r\n          {loading ? (\r\n            <TableRow>\r\n              <TableCell colSpan={columns} style={{ textAlign: \"center\" }}>\r\n                <CircularProgress size={36} />\r\n              </TableCell>\r\n            </TableRow>\r\n          ) : (\r\n            stableSort(data, getComparator(order, orderBy))\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map(\r\n                ({ airline, grade, duration, stops, fare, cabin }: IFlight) => (\r\n                  <TableRow\r\n                    hover\r\n                    tabIndex={-1}\r\n                    key={airline + grade + duration + stops + fare + cabin}\r\n                  >\r\n                    <TableCell>{airline}</TableCell>\r\n                    <TableCell align=\"left\">{cabin}</TableCell>\r\n                    <TableCell align=\"left\">{grade}</TableCell>\r\n                    <TableCell align=\"left\">{`${Math.floor(\r\n                      duration / 60\r\n                    )}h ${duration % 60}m`}</TableCell>\r\n                    <TableCell align=\"right\">{stops}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {fare.toLocaleString(\"en-US\", {\r\n                        style: \"currency\",\r\n                        currency: \"USD\",\r\n                        minimumFractionDigits: 2\r\n                      })}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )\r\n              )\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              colSpan={columns}\r\n              count={data.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default FlightsTable;\r\n","import { IAirport, IFlight } from \"../interfaces\";\r\n\r\ninterface ILocation {\r\n  city?: any;\r\n  country?: any;\r\n  lat: number;\r\n  lon: number;\r\n  postalCode?: any;\r\n  region?: any;\r\n  street?: any;\r\n  code?: any;\r\n  isValid: boolean;\r\n  name?: any;\r\n  rgn?: any;\r\n  locId: string;\r\n  shortDisplay: string;\r\n  cityCode: string;\r\n}\r\n\r\ninterface IAirline {\r\n  code: string;\r\n  name: string;\r\n  fare: number;\r\n  isPreferred: boolean;\r\n  hasNonStop: boolean;\r\n}\r\n\r\ninterface IColumnBrand {\r\n  airlineCode: string;\r\n  brandId: number;\r\n  brandNum: number;\r\n  brandName: string;\r\n  extraColumns: number;\r\n  description: string;\r\n  fullDescription: string;\r\n  hasImage: boolean;\r\n  firstCheckedBag: string;\r\n  secondCheckedBag: string;\r\n  carryOnBag: string;\r\n  personalItem: string;\r\n  brandPerks: string[];\r\n  brandRestrictions: string[];\r\n  upgradeOffer: boolean;\r\n  upgradeOfferHeader: string;\r\n  upgradeOfferRestrictions: string[];\r\n  upgradeOfferBenefits: string[];\r\n}\r\n\r\ninterface IFlightBrand {\r\n  airlineCode: string;\r\n  brandId: number;\r\n  brandNum: number;\r\n  brandName: string;\r\n  extraColumns: number;\r\n  description: string;\r\n  fullDescription: string;\r\n  hasImage: boolean;\r\n  firstCheckedBag: string;\r\n  secondCheckedBag: string;\r\n  carryOnBag: string;\r\n  personalItem: string;\r\n  brandPerks: string[];\r\n  brandRestrictions: string[];\r\n  upgradeOffer: boolean;\r\n  upgradeOfferHeader: string;\r\n  upgradeOfferRestrictions: string[];\r\n  upgradeOfferBenefits: string[];\r\n}\r\n\r\ninterface ISeat {\r\n  route: string;\r\n  cabin: string;\r\n  cabinCode: string;\r\n  config: string;\r\n  num: number;\r\n  type: string;\r\n  pitchRate: string;\r\n  seatWidth: string;\r\n  width: number;\r\n  widthRate: string;\r\n  pitch: number;\r\n  seatPitch: string;\r\n}\r\n\r\ninterface IAvailability {\r\n  bic: string;\r\n  count: number;\r\n  cabin: string;\r\n}\r\n\r\ninterface IImage {\r\n  url: string;\r\n  cabin: string;\r\n  route: string;\r\n}\r\n\r\ninterface ISegment {\r\n  segNum: number;\r\n  fullSegNum: number;\r\n  sectorNum: number;\r\n  airlineCode: string;\r\n  airlineName: string;\r\n  allianceCode: string;\r\n  flightNumber: number;\r\n  fromCode: string;\r\n  fromName: string;\r\n  fromLocId?: any;\r\n  toCode: string;\r\n  toName: string;\r\n  toLocId?: any;\r\n  departs: string;\r\n  arrives: string;\r\n  dayChange: number;\r\n  opAirlineCode: string;\r\n  opAirlineName: string;\r\n  miles: number;\r\n  duration: number;\r\n  aircraftTypeCode: string;\r\n  aircraftTypeName: string;\r\n  aircraftTypeCategory: string;\r\n  fromTerminal: string;\r\n  toTerminal: string;\r\n  onTimePercent: number;\r\n  numStops: number;\r\n  planeChange: boolean;\r\n  isConnection: boolean;\r\n  isDelphiConnection: boolean;\r\n  connectionType?: any;\r\n  stopPoints: any[];\r\n  seats: ISeat[];\r\n  availability: IAvailability[];\r\n  seatText: string;\r\n  cabinSeatString: string;\r\n  cabinText: string;\r\n  seatBookingLevel: string;\r\n  brandNum: number;\r\n  brandId: number;\r\n  images: IImage[];\r\n}\r\n\r\ninterface ISegment2 {\r\n  duration: number;\r\n  flight: string;\r\n  status: string;\r\n  text: string;\r\n}\r\n\r\ninterface IAmenity {\r\n  code: number;\r\n  segments: ISegment2[];\r\n}\r\n\r\ninterface ISeatsBySegment {\r\n  route: string;\r\n  cabin: string;\r\n  cabinCode: string;\r\n  config: string;\r\n  num: number;\r\n  type: string;\r\n  pitchRate: string;\r\n  seatWidth: string;\r\n  width: number;\r\n  widthRate: string;\r\n  pitch: number;\r\n  seatPitch: string;\r\n}\r\n\r\ninterface IMedium {\r\n  url: string;\r\n  cabin: string;\r\n  route: string;\r\n}\r\n\r\ninterface IFare {\r\n  baseFare: number;\r\n  tax: number;\r\n  totalFare: number;\r\n  totalItinerary: number;\r\n  downgradeRequired: boolean;\r\n  notOfferedReason?: any;\r\n  soldOut: boolean;\r\n  specialRatePopup?: any;\r\n  specialRateText?: any;\r\n  bic: string;\r\n  fbc: string;\r\n  brandColumn: number;\r\n  brandIndex: number;\r\n  shelf: number;\r\n  grade: string;\r\n  amenities: IAmenity[];\r\n  split: string;\r\n  source: string;\r\n  itineraryFlights: string[];\r\n  outOfPolicy: boolean;\r\n  policyBreakDetails?: any;\r\n  rateType?: any;\r\n  refundable: boolean;\r\n  changeFee: string;\r\n  wifi: number;\r\n  ife: number;\r\n  liveTV: number;\r\n  power: number;\r\n  seatAssignments: number;\r\n  seatType: number;\r\n  seatWidth: string;\r\n  seatPitch: string;\r\n  boardingPriority: string;\r\n  seatsBySegment: ISeatsBySegment[];\r\n  media: IMedium[];\r\n  cabinClassCode: string;\r\n}\r\n\r\ninterface IFlightResponse {\r\n  airportOnly: boolean;\r\n  airlineCode: string;\r\n  airlineName: string;\r\n  flightGrade: string;\r\n  duration: number;\r\n  numStops: number;\r\n  segments: ISegment[];\r\n  fares: IFare[];\r\n  isPreferred: boolean;\r\n}\r\n\r\ninterface IAirportOption {\r\n  locId: string;\r\n  locIdName: string;\r\n  airports: IAirport[];\r\n}\r\n\r\ninterface IResponse {\r\n  fareDisplayType: string;\r\n  brandDisplayType: string;\r\n  showShelves: boolean;\r\n  allFlightsFilteredOut: boolean;\r\n  searchId: number;\r\n  statsId: number;\r\n  locations: ILocation[];\r\n  airlines: IAirline[];\r\n  columnBrands: IColumnBrand[];\r\n  flightBrands: IFlightBrand[];\r\n  flights: IFlightResponse[];\r\n  itineraries?: any;\r\n  selectedFlights?: any;\r\n  stopOptions: string[];\r\n  airportOptions: IAirportOption[];\r\n  unwantedAirports?: any;\r\n  policyApplied: number;\r\n  haveCustomerEmail: boolean;\r\n}\r\n\r\n// TODO: Accept array of flights\r\nexport const queryFlights = async (\r\n  from: IAirport,\r\n  to: IAirport,\r\n  date: Date,\r\n  timeStart: Date | null,\r\n  timeEnd: Date | null\r\n): Promise<IFlight[]> => {\r\n  const response = await fetch(\r\n    process.env.REACT_APP_API_URL +\r\n      `/flights?queryparams=${formatFlightQueryParameters(\r\n        from,\r\n        to,\r\n        date,\r\n        timeStart,\r\n        timeEnd\r\n      )}`\r\n  );\r\n  const json: IResponse = await response.json();\r\n\r\n  console.log(json);\r\n\r\n  const list: IFlight[] = [];\r\n\r\n  json.flights.forEach(\r\n    ({ airlineName, flightGrade, duration, numStops, fares }) =>\r\n      fares.forEach(({ totalFare, cabinClassCode }: IFare) =>\r\n        list.push({\r\n          airline: airlineName,\r\n          grade: flightGrade,\r\n          duration,\r\n          stops: numStops,\r\n          fare: totalFare,\r\n          cabin: cabinClassCode\r\n        })\r\n      )\r\n  );\r\n\r\n  return list;\r\n};\r\n\r\nexport const formatFlightQueryParameters = (\r\n  from: IAirport,\r\n  to: IAirport,\r\n  date: Date,\r\n  timeStart: Date | null,\r\n  timeEnd: Date | null\r\n) => {\r\n  const legs = formatFlightLegs(from, to, date);\r\n  const timeFilters =\r\n    timeStart !== null && timeEnd !== null\r\n      ? formatTimeFilters(timeStart, timeEnd)\r\n      : null;\r\n  return `{${legs},${\r\n    timeFilters === null ? \"\" : timeFilters + \",\"\r\n  }\"airlineView\":\"DL\",\"legNum\":1}`;\r\n};\r\n\r\nexport const formatFlightLegs = (from: IAirport, to: IAirport, date: Date) =>\r\n  `\"legs\":[{\"date\":\"${date.toISOString().split(\"T\")[0]}\",` +\r\n  `\"fromLocId\":\"${from.locID}\",\"toLocId\":\"${to.locID}\"}]`;\r\n\r\nexport const formatTimeFilters = (timeStart: Date, timeEnd: Date) =>\r\n  `\"filters\":{\"timeFilters\":[{\"departFromTime\":\"${timeStart.getHours()}00\",\"departToTime\":\"${timeEnd.getHours()}00\"}]`;\r\n\r\nexport default queryFlights;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  KeyboardTimePicker,\r\n  MuiPickersUtilsProvider\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { IAirport, IFlight } from \"../../interfaces\";\r\nimport AirportSearchInput from \"./AirportSearchInput\";\r\nimport FlightsTable from \"./FlightsTable\";\r\nimport queryFlights from \"../../API/queryFlights\";\r\n\r\nconst Flights = () => {\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [from, setFrom]: [IAirport | undefined, any] = React.useState();\r\n  const [to, setTo]: [IAirport | undefined, any] = React.useState();\r\n  const [date, setDate] = React.useState<Date | null>(new Date(Date.now()));\r\n  const [timeStart, setTimeStart] = React.useState<Date | null>(null);\r\n  const [timeEnd, setTimeEnd] = React.useState<Date | null>(null);\r\n  const [flights, setFlights] = React.useState<IFlight[]>([]);\r\n  const [active, setActive] = React.useState(false);\r\n\r\n  const query = React.useCallback(async () => {\r\n    if (from === undefined || to === undefined || date === null) return;\r\n\r\n    setLoading(true);\r\n    setFlights(await queryFlights(from, to, date, timeStart, timeEnd));\r\n    setLoading(false);\r\n  }, [from, to, date, timeStart, timeEnd]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3} justify=\"space-evenly\">\r\n        <Grid item xs={12} sm={6}>\r\n          <AirportSearchInput setSelected={setFrom} label=\"Flying from\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <AirportSearchInput setSelected={setTo} label=\"Destination\" />\r\n        </Grid>\r\n\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <Grid item xs={12} sm={12}>\r\n            <KeyboardDatePicker\r\n              required\r\n              label=\"Departing Date\"\r\n              inputVariant=\"outlined\"\r\n              value={date}\r\n              onChange={(date: Date | null) => setDate(date)}\r\n              showTodayButton\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <KeyboardTimePicker\r\n              label=\"Start\"\r\n              value={timeStart}\r\n              onChange={(date: Date | null) => setTimeStart(date)}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change start time\"\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <KeyboardTimePicker\r\n              label=\"End\"\r\n              value={timeEnd}\r\n              onChange={(date: Date | null) => setTimeEnd(date)}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change end time\"\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              disabled={loading}\r\n              onClick={() => {\r\n                setActive(true);\r\n                query();\r\n              }}\r\n            >\r\n              Search\r\n            </Button>\r\n          </Grid>\r\n        </MuiPickersUtilsProvider>\r\n\r\n        <Grid item xs={12}>\r\n          {active && <FlightsTable data={flights} loading={loading} />}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Flights;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst Information = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Your Information\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n            fullWidth\r\n            autoComplete=\"fname\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            label=\"Last name\"\r\n            fullWidth\r\n            autoComplete=\"lname\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            required\r\n            id=\"so\"\r\n            name=\"so\"\r\n            label=\"SO\"\r\n            fullWidth\r\n            autoComplete=\"so\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"@material-ui/core\";\nimport Flights from \"./Components/Flights/Flights\";\nimport Information from \"./Components/Information/Information\";\n\nfunction PoweredBy() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Powered By \"}\n      <Link color=\"inherit\" href=\"https://www.certify.com/\">\n        Certify Travel\n      </Link>\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: \"relative\"\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5)\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst steps = [\"Information\", \"Flights\", \"Lodging\", \"Car Rentals\"];\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return <Information />;\n    case 1:\n      return <Flights />;\n    case 2:\n      return <div>Lodging</div>;\n    case 3:\n      return <div>Car Rentals</div>;\n    default:\n      throw new Error(\"Unknown step\");\n  }\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Flight Finder\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Book Flights\n          </Typography>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map(label => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {activeStep === steps.length ? (\n              <React.Fragment>\n                <Typography variant=\"h5\" gutterBottom>\n                  Thank you for your order.\n                </Typography>\n                <Typography variant=\"subtitle1\">\n                  Your order number is #2001539. We have emailed your order\n                  confirmation, and will send you an update when your order has\n                  shipped.\n                </Typography>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {getStepContent(activeStep)}\n                <div className={classes.buttons}>\n                  {activeStep !== 0 && (\n                    <Button onClick={handleBack} className={classes.button}>\n                      Back\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                    className={classes.button}\n                  >\n                    {activeStep === steps.length - 1 ? \"Place order\" : \"Next\"}\n                  </Button>\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n        <PoweredBy />\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}