{"version":3,"sources":["Components/AirportSearchInput/AirportSearchInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AirportSearchInput","setSelected","React","useState","filter","setFilter","open","setOpen","options","setOptions","loading","length","useEffect","active","a","fetch","process","response","json","cities","list","forEach","Display","nearbyAirports","code","name","push","city","Autocomplete","id","style","width","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","toLocaleUpperCase","freeSolo","clearOnEscape","onChange","event","newValue","undefined","groupBy","renderInput","params","TextField","label","variant","e","target","InputProps","endAdornment","Fragment","CircularProgress","color","size","App","fromAirport","setFromAirport","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUA0IeA,EA5GY,SAAC,GAIrB,IAHLC,EAGI,EAHJA,YAGI,EACwBC,IAAMC,SAAS,IADvC,mBACGC,EADH,KACWC,EADX,OAEoBH,IAAMC,UAAS,GAFnC,mBAEGG,EAFH,KAESC,EAFT,OAG0BL,IAAMC,SAAqB,IAHrD,mBAGGK,EAHH,KAGYC,EAHZ,KAIEC,EAAUJ,GAA2B,IAAnBE,EAAQG,OA6ChC,OA3CAT,IAAMU,WAAU,WACd,IAAIC,GAAS,EAEb,GAAKH,EA6BL,OAzBA,sBAAC,gCAAAI,EAAA,yDACgB,KAAXV,EADL,iEAGwBW,MAAM,GAAD,OACvBC,mDADuB,kDACgDZ,EADhD,wBAH7B,cAGOa,EAHP,gBAMmCA,EAASC,OAN5C,OAMOC,EANP,OAQKN,IACIO,EAAmB,GAEzBD,EAAOE,SAAQ,YAAkC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eACX,OAAdA,QAAc,IAAdA,KAAgBF,SAAQ,gBAAGG,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACtBL,EAAKM,KAAK,CACRF,OACAC,OACAE,KAAML,OAIVb,EAAW,GAAD,OAAKW,QApBpB,0CAAD,GAyBO,WACLP,GAAS,KAEV,CAACH,EAASN,IAEbF,IAAMU,WAAU,WACTN,GACHG,EAAW,MAEZ,CAACH,IAGF,kBAACsB,EAAA,EAAD,CACEC,GAAG,WACHC,MAAO,CAAEC,MAAO,KAChBzB,KAAMA,EACN0B,OAAQ,WACS,KAAX5B,GAAeG,GAAQ,IAE7B0B,QAAS,WACP1B,GAAQ,GACRF,EAAU,KAEZ6B,kBAAmB,SAACC,EAAQC,GAAT,OAAmBD,EAAOV,OAASW,EAAMX,MAC5DY,eAAgB,SAAAF,GAAM,gBACjBA,EAAOX,KAAKc,oBADK,cACoBH,EAAOV,OAEjDc,UAAQ,EACRC,eAAa,EACbC,SAAU,SAACC,EAAYC,GACrB1C,EAAyB,OAAb0C,OAAoBC,EAAYD,IAE9CnC,QAASA,EACTE,QAASA,EACTmC,QAAS,SAAAV,GAAM,OAAIA,EAAOR,MAC1BmB,YAAa,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,UACNC,QAAQ,WACRT,SAAU,SAAAU,GACR9C,EAAU8C,EAAEC,OAAOhB,OAEI,KAAnBe,EAAEC,OAAOhB,MACX7B,GAAQ,GAERA,GAAQ,IAGZ8C,WAAU,eACLN,EAAOM,WADF,CAERC,aACE,kBAAC,IAAMC,SAAP,KACG7C,EACC,kBAAC8C,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACtC,KACHX,EAAOM,WAAWC,uBC7GpBK,EAbH,WAAO,IAAD,EAIZzD,IAAMC,WAJM,mBACTyD,EADS,KACIC,EADJ,KAKhB,OACE,yBAAKC,UAAU,OACb,kCAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAapC,MACjB,kBAAC,EAAD,CAAoBvB,YAAa4D,MCFnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.429f343c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { IAirport } from \"../../interfaces\";\r\n\r\ninterface IResponse {\r\n  AirRank: number;\r\n  CarRank: number;\r\n  Display: string;\r\n  HotelRank: number;\r\n  KeyType: string;\r\n  LocID: string;\r\n  Word: string;\r\n  isCode: boolean;\r\n  isFirst: boolean;\r\n  nearbyAirports: [\r\n    {\r\n      code: string;\r\n      name: string;\r\n      isRail: boolean;\r\n    }\r\n  ];\r\n}\r\n\r\ninterface ICity {\r\n  name: string;\r\n  airports: IAirport[];\r\n}\r\n\r\nconst AirportSearchInput = ({\r\n  setSelected\r\n}: {\r\n  setSelected: (value: IAirport | undefined) => void;\r\n}) => {\r\n  const [filter, setFilter] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState<IAirport[]>([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n    (async () => {\r\n      if (filter === \"\") return;\r\n\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/airports?queryparams={\"searchString\":\"${filter}\",\"mode\":\"Flights\"}`\r\n      );\r\n      const cities: IResponse[] = await response.json();\r\n\r\n      if (active) {\r\n        const list: IAirport[] = [];\r\n\r\n        cities.forEach(({ Display, nearbyAirports }) => {\r\n          nearbyAirports?.forEach(({ code, name }) =>\r\n            list.push({\r\n              code,\r\n              name,\r\n              city: Display\r\n            })\r\n          );\r\n\r\n          setOptions([...list]);\r\n        });\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading, filter]);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"airports\"\r\n      style={{ width: 300 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        if (filter !== \"\") setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n        setFilter(\"\");\r\n      }}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={option =>\r\n        `${option.code.toLocaleUpperCase()} - ${option.name}`\r\n      }\r\n      freeSolo\r\n      clearOnEscape\r\n      onChange={(event: any, newValue: IAirport | null) => {\r\n        setSelected(newValue === null ? undefined : newValue);\r\n      }}\r\n      options={options}\r\n      loading={loading}\r\n      groupBy={option => option.city}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Airport\"\r\n          variant=\"outlined\"\r\n          onChange={e => {\r\n            setFilter(e.target.value);\r\n\r\n            if (e.target.value === \"\") {\r\n              setOpen(false);\r\n            } else {\r\n              setOpen(true);\r\n            }\r\n          }}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? (\r\n                  <CircularProgress color=\"inherit\" size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AirportSearchInput;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AirportSearchInput from \"./Components/AirportSearchInput/AirportSearchInput\";\nimport { IAirport } from \"./interfaces\";\n\nconst App = () => {\n  const [fromAirport, setFromAirport]: [\n    IAirport | undefined,\n    any\n  ] = React.useState();\n  return (\n    <div className=\"App\">\n      <p>{fromAirport?.code}</p>\n      <AirportSearchInput setSelected={setFromAirport} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}